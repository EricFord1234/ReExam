/* Copyright (C) 2013 Justin Windle, http://soulwire.co.uk */
!function(e,t){"object"==typeof exports?module.exports=t(e,e.document):"function"==typeof define&&define.amd?define(function(){return t(e,e.document)}):e.Sketch=t(e,e.document)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e){return"[object Array]"==Object.prototype.toString.call(e)}function o(e){return"function"==typeof e}function r(e){return"number"==typeof e}function i(e){return"string"==typeof e}function u(e){return C[e]||String.fromCharCode(e)}function a(e,t,n){for(var o in t)!n&&o in e||(e[o]=t[o]);return e}function c(e,t){return function(){e.apply(t,arguments)}}function l(e){var t={};for(var n in e)"webkitMovementX"!==n&&"webkitMovementY"!==n&&(o(e[n])?t[n]=c(e[n],e):t[n]=e[n]);return t}function s(e){function t(t){o(t)&&t.apply(e,[].splice.call(arguments,1))}function n(e){for(_=0;_<ee.length;_++)B=ee[_],i(B)?S[(e?"add":"remove")+"EventListener"].call(S,B,N,!1):o(B)?N=B:S=B}function r(){I(A),A=R(r),K||(t(e.setup),K=o(e.setup)),U||(t(e.resize),U=o(e.resize)),e.running&&!q&&(e.dt=(z=+new Date)-e.now,e.millis+=e.dt,e.now=z,t(e.update),Z&&(e.retina&&(e.save(),e.autoclear&&e.scale(V,V)),e.autoclear&&e.clear()),t(e.draw),Z&&e.retina&&e.restore()),q=++q%e.interval}function c(){S=J?e.style:e.canvas,D=J?"px":"",Y=e.width,j=e.height,e.fullscreen&&(j=e.height=v.innerHeight,Y=e.width=v.innerWidth),e.retina&&Z&&V&&(S.style.height=j+"px",S.style.width=Y+"px",Y*=V,j*=V),S.height!==j&&(S.height=j+D),S.width!==Y&&(S.width=Y+D),Z&&!e.autoclear&&e.retina&&e.scale(V,V),K&&t(e.resize)}function s(e,t){return L=t.getBoundingClientRect(),e.x=e.pageX-L.left-(v.scrollX||v.pageXOffset),e.y=e.pageY-L.top-(v.scrollY||v.pageYOffset),e}function f(t,n){return s(t,e.element),n=n||{},n.ox=n.x||t.x,n.oy=n.y||t.y,n.x=t.x,n.y=t.y,n.dx=n.x-n.ox,n.dy=n.y-n.oy,n}function d(e){if(e.preventDefault(),G=l(e),G.originalEvent=e,G.touches)for(Q.length=G.touches.length,_=0;_<G.touches.length;_++)Q[_]=f(G.touches[_],Q[_]);else Q.length=0,Q[0]=f(G,$);return a($,Q[0],!0),G}function p(n){for(n=d(n),M=(X=ee.indexOf(W=n.type))-1,e.dragging=!!/down|start/.test(W)||!/up|end/.test(W)&&e.dragging;M;)i(ee[M])?t(e[ee[M--]],n):i(ee[X])?t(e[ee[X++]],n):M=0}function g(n){F=n.keyCode,H="keyup"==n.type,te[F]=te[u(F)]=!H,t(e[n.type],n)}function m(n){e.autopause&&("blur"==n.type?E:y)(),t(e[n.type],n)}function y(){e.now=+new Date,e.running=!0}function E(){e.running=!1}function k(){(e.running?E:y)()}function P(){Z&&e.clearRect(0,0,e.width*V,e.height*V)}function T(){O=e.element.parentNode,_=b.indexOf(e),O&&O.removeChild(e.element),~_&&b.splice(_,1),n(!1),E()}var A,N,S,O,L,_,D,z,B,G,W,F,H,M,X,Y,j,q=0,Q=[],U=!1,K=!1,V=v.devicePixelRatio||1,J=e.type==w,Z=e.type==h,$={x:0,y:0,ox:0,oy:0,dx:0,dy:0},ee=[e.eventTarget||e.element,p,"mousedown","touchstart",p,"mousemove","touchmove",p,"mouseup","touchend",p,"click",p,"mouseout",p,"mouseover",x,g,"keydown","keyup",v,m,"focus","blur",c,"resize"],te={};for(F in C)te[C[F]]=!1;return a(e,{touches:Q,mouse:$,keys:te,dragging:!1,running:!1,millis:0,now:NaN,dt:NaN,destroy:T,toggle:k,clear:P,start:y,stop:E}),b.push(e),e.autostart&&y(),n(!0),c(),r(),e}for(var f,d,p="E LN10 LN2 LOG2E LOG10E PI SQRT1_2 SQRT2 abs acos asin atan ceil cos exp floor log round sin sqrt tan atan2 pow max min".split(" "),g="__hasSketch",m=Math,h="canvas",y="webgl",w="dom",x=t,v=e,b=[],E={fullscreen:!0,autostart:!0,autoclear:!0,autopause:!0,container:x.body,interval:1,globals:!0,retina:!1,type:h},C={8:"BACKSPACE",9:"TAB",13:"ENTER",16:"SHIFT",27:"ESCAPE",32:"SPACE",37:"LEFT",38:"UP",39:"RIGHT",40:"DOWN"},k={CANVAS:h,WEB_GL:y,WEBGL:y,DOM:w,instances:b,install:function(e){if(!e[g]){for(var t=0;t<p.length;t++)e[p[t]]=m[p[t]];a(e,{TWO_PI:2*m.PI,HALF_PI:m.PI/2,QUARTER_PI:m.PI/4,random:function(e,t){return n(e)?e[~~(m.random()*e.length)]:(r(t)||(t=e||1,e=0),e+m.random()*(t-e))},lerp:function(e,t,n){return e+n*(t-e)},map:function(e,t,n,o,r){return(e-t)/(n-t)*(r-o)+o}}),e[g]=!0}},create:function(e){return e=a(e||{},E),e.globals&&k.install(self),f=e.element=e.element||x.createElement(e.type===w?"div":"canvas"),d=e.context=e.context||function(){switch(e.type){case h:return f.getContext("2d",e);case y:return f.getContext("webgl",e)||f.getContext("experimental-webgl",e);case w:return f.canvas=f}}(),(e.container||x.body).appendChild(f),k.augment(d,e)},augment:function(e,t){return t=a(t||{},E),t.element=e.canvas||e,t.element.className+=" sketch",a(e,t,!0),s(e)}},P=["ms","moz","webkit","o"],T=self,A=0,N="AnimationFrame",S="request"+N,O="cancel"+N,R=T[S],I=T[O],L=0;L<P.length&&!R;L++)R=T[P[L]+"Request"+N],I=T[P[L]+"Cancel"+N];return T[S]=R=R||function(e){var t=+new Date,n=m.max(0,16-(t-A)),o=setTimeout(function(){e(t+n)},n);return A=t+n,o},T[O]=I=I||function(e){clearTimeout(e)},k});

// Generated by CoffeeScript 1.6.3
(function() {
    var GLSL, error, gl, gui, nogl;
  
    GLSL = {
      vert: "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Uniforms\nuniform vec2 u_resolution;\n\n// Attributes\nattribute vec2 a_position;\n\nvoid main() {\n    gl_Position = vec4 (a_position, 0, 1);\n}\n",
      frag: "\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform bool u_scanlines;\nuniform vec2 u_resolution;\n\nuniform float u_brightness;\nuniform float u_blobiness;\nuniform float u_particles;\nuniform float u_millis;\nuniform float u_energy;\n\n// http://goo.gl/LrCde\nfloat noise( vec2 co ){\n    return fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n}\n\nvoid main( void ) {\n\n    vec2 position = ( gl_FragCoord.xy / u_resolution.x );\n    float t = u_millis * 0.001 * u_energy;\n    \n    float a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n\n    vec2 pos, center = vec2( 0.5, 0.5 * (u_resolution.y / u_resolution.x) );\n    \n    float na, nb, nc, nd, d;\n    float limit = u_particles / 40.0;\n    float step = 1.0 / u_particles;\n    float n = 0.0;\n    \n    for ( float i = 0.0; i <= 1.0; i += 0.025 ) {\n\n        if ( i <= limit ) {\n\n            vec2 np = vec2(n, 1-1);\n            \n            na = noise( np * 1.1 );\n            nb = noise( np * 2.8 );\n            nc = noise( np * 0.7 );\n            nd = noise( np * 3.2 );\n\n            pos = center;\n            pos.x += sin(t*na) * cos(t*nb) * tan(t*na*0.15) * 0.3;\n            pos.y += tan(t*nc) * sin(t*nd) * 0.1;\n            \n            d = pow( 1.6*na / length( pos - position ), u_blobiness );\n            \n            if ( i < limit * 0.3333 ) a += d;\n            else if ( i < limit * 0.6666 ) b += d;\n            else c += d;\n\n            n += step;\n        }\n    }\n    \n    vec3 col = vec3(a*c,b*c,a*b) * 0.0001 * u_brightness;\n    \n    if ( u_scanlines ) {\n        col -= mod( gl_FragCoord.y, 2.0 ) < 1.0 ? 0.5 : 0.0;\n    }\n    \n    gl_FragColor = vec4( col, 1.0 );\n\n}\n"
    };
  
    try {
      gl = Sketch.create({
        container: document.getElementById('container'),
        type: Sketch.WEB_GL,
        brightness: 0.8,
        blobiness: 1.5,
        particles: 40,
        energy: 1.01,
        scanlines: true
      });
    } catch (_error) {
      error = _error;
      nogl = document.getElementById('nogl');
      nogl.style.display = 'block';
    }
  
    if (gl) {
      gl.setup = function() {
        var frag, vert;
        this.clearColor(0.0, 0.0, 0.0, 1.0);
        vert = this.createShader(this.VERTEX_SHADER);
        frag = this.createShader(this.FRAGMENT_SHADER);
        this.shaderSource(vert, GLSL.vert);
        this.shaderSource(frag, GLSL.frag);
        this.compileShader(vert);
        this.compileShader(frag);
        if (!this.getShaderParameter(vert, this.COMPILE_STATUS)) {
          throw this.getShaderInfoLog(vert);
        }
        if (!this.getShaderParameter(frag, this.COMPILE_STATUS)) {
          throw this.getShaderInfoLog(frag);
        }
        this.shaderProgram = this.createProgram();
        this.attachShader(this.shaderProgram, vert);
        this.attachShader(this.shaderProgram, frag);
        this.linkProgram(this.shaderProgram);
        if (!this.getProgramParameter(this.shaderProgram, this.LINK_STATUS)) {
          throw this.getProgramInfoLog(this.shaderProgram);
        }
        this.useProgram(this.shaderProgram);
        this.shaderProgram.attributes = {
          position: this.getAttribLocation(this.shaderProgram, 'a_position')
        };
        this.shaderProgram.uniforms = {
          resolution: this.getUniformLocation(this.shaderProgram, 'u_resolution'),
          brightness: this.getUniformLocation(this.shaderProgram, 'u_brightness'),
          blobiness: this.getUniformLocation(this.shaderProgram, 'u_blobiness'),
          particles: this.getUniformLocation(this.shaderProgram, 'u_particles'),
          scanlines: this.getUniformLocation(this.shaderProgram, 'u_scanlines'),
          energy: this.getUniformLocation(this.shaderProgram, 'u_energy'),
          millis: this.getUniformLocation(this.shaderProgram, 'u_millis')
        };
        this.geometry = this.createBuffer();
        this.geometry.vertexCount = 6;
        this.bindBuffer(this.ARRAY_BUFFER, this.geometry);
        this.bufferData(this.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]), this.STATIC_DRAW);
        this.enableVertexAttribArray(this.shaderProgram.attributes.position);
        this.vertexAttribPointer(this.shaderProgram.attributes.position, 2, this.FLOAT, false, 0, 0);
        return this.resize();
      };
      gl.updateUniforms = function() {
        if (!this.shaderProgram) {
          return;
        }
        this.uniform2f(this.shaderProgram.uniforms.resolution, this.width, this.height);
        this.uniform1f(this.shaderProgram.uniforms.brightness, this.brightness);
        this.uniform1f(this.shaderProgram.uniforms.blobiness, this.blobiness);
        this.uniform1f(this.shaderProgram.uniforms.particles, this.particles);
        this.uniform1i(this.shaderProgram.uniforms.scanlines, this.scanlines);
        return this.uniform1f(this.shaderProgram.uniforms.energy, this.energy);
      };
      gl.draw = function() {
        this.uniform1f(this.shaderProgram.uniforms.millis, this.millis + 5000);
        this.clear(this.COLOR_BUFFER_BIT | this.DEPTH_BUFFER_BIT);
        this.bindBuffer(this.ARRAY_BUFFER, this.geometry);
        return this.drawArrays(this.TRIANGLES, 0, this.geometry.vertexCount);
      };
      gl.resize = function() {
        this.viewport(0, 0, this.width, this.height);
        return this.updateUniforms();
      };
      gui = new dat.GUI();
      gui.add(gl, 'particles').step(1.0).min(8).max(40).onChange(function() {
        return gl.updateUniforms();
      });
      gui.add(gl, 'brightness').step(0.01).min(0.1).max(1.0).onChange(function() {
        return gl.updateUniforms();
      });
      gui.add(gl, 'blobiness').step(0.01).min(0.8).max(1.5).onChange(function() {
        return gl.updateUniforms();
      });
      gui.add(gl, 'energy').step(0.01).min(0.1).max(4.0).onChange(function() {
        return gl.updateUniforms();
      });
      gui.add(gl, 'scanlines').onChange(function() {
        return gl.updateUniforms();
      });
      gui.close();
    }
  
  }).call(this);
  